class Solution {
public:

    void dfs(int node, unordered_map<int, list<pair<int, int>>> &adj, vector<bool> &vis, int &mini){
        vis[node] = 1;
        for(auto i:adj[node]){
            if(!vis[i.first]){
                mini = min(mini, i.second);
                dfs(i.first, adj, vis, mini);
            }
            else{
                mini = min(mini, i.second);
            }
        }
    }

    int minScore(int n, vector<vector<int>>& roads) {

        unordered_map<int, list<pair<int, int>>> adj;

        for(int i = 0; i < roads.size(); i++){
            int u = roads[i][0];
            int v = roads[i][1];
            int w = roads[i][2];

            pair<int, int> p1 = {u, w};
            pair<int, int> p2 = {v, w};

            adj[u].push_back(p2);
            adj[v].push_back(p1);
        }

        vector<bool> vis(n, 0);
        int mini = INT_MAX;
        
        dfs(1, adj, vis, mini);

        return mini;
    }
};
