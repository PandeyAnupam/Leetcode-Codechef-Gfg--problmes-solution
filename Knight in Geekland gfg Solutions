class Pair{
    int x,y,steps;
    Pair(int x,int y,int steps){
        this.x=x;
        this.y=y;
        this.steps=steps;
    }
}
class Solution{
    public int knightInGeekland(int arr[][], int start_x, int start_y){
        // Code Here.
        List<Integer> steps=new ArrayList<>();
        Queue<Pair> q=new LinkedList<>();
        boolean visited[][]=new boolean[arr.length][arr[0].length];
        q.add(new Pair(start_x,start_y,0));
        visited[start_x][start_y]=true;
        int knight_x[]={1,2,2,1,-1,-2,-2,-1};
        int knight_y[]={-2,-1,1,2,2,1,-1,-2};
        while(q.isEmpty()==false)
        {
            int size=q.size();
            int sum=0;
            for(int i=0;i<size;i++){
                Pair curr=q.poll();
                 sum+=arr[curr.x][curr.y];
                visited[curr.x][curr.y]=true;
                for(int j=0;j<8;j++){
                    int newX=curr.x+knight_x[j];
                    int newY=curr.y+knight_y[j];
                    if(newX>=0&&newX<arr.length&&newY>=0&&newY<arr[0].length&&visited[newX][newY]==false){
                        q.add(new Pair(newX,newY,curr.steps+1));
                        visited[newX][newY]=true;
                    }
                }
                
            }
            steps.add(sum);
           
        }
        int step[]=new int[steps.size()];
        int index=0;
        for(int x:steps){
            step[index++]=x;
        }
        int temp[]=new int[step.length];
        for(int i=0;i<temp.length;i++){
            int j=i;
            while(j<temp.length){
                temp[i]=temp[i]+step[j];
                int aux=j;
                j=j+step[j];
                if(aux==j){
                    break;
                }
            }
        }
        int ansIdx=0,max=0;
        for(int i=0;i<temp.length;i++){
            if(max<temp[i]){
                max=temp[i];
                ansIdx=i;
            }
            
        }
        return ansIdx;
    }
}   
